{"version":3,"file":"index.js","sources":["../node_modules/@ungap/array-iterator/esm/index.js","../node_modules/clone-regexp/node_modules/is-regexp/index.js","../node_modules/clone-regexp/index.js","../index.js"],"sourcesContent":["/*! (c) Andrea Giammarchi - ISC */\n// requires a global Symbol\nvar iterator = [][Symbol.iterator] || /* istanbul ignore next */ function () {\n  var i = 0;\n  var self = this;\n  return {\n    next: function () {\n      var done = self.length <= i;\n      var value = done ? void 0 : self[i++];\n      return {\n        value: value,\n        done: done\n      };\n    }\n  };\n};\nexport default iterator;\n","export default function isRegexp(value) {\n\treturn Object.prototype.toString.call(value) === '[object RegExp]';\n}\n","import isRegexp from 'is-regexp';\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nexport default function clonedRegexp(regexp, options = {}) {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n}\n","/* globals RegExpExecArray, RegExpMatchArray, IterableIterator */\n\n// @ts-ignore\nimport iterator from '@ungap/array-iterator';\nimport cloneRegexp from 'clone-regexp';\n\nconst supportsGroups = 'groups' in (/a/.exec('a') ?? {});\n\n/**\n * @param {RegExpExecArray?} previousMatch\n * @param {RegExpExecArray?} match\n */\nconst isInfiniteLoop = (previousMatch, match) => {\n\tconst isLooselyTrue =\n\t\tpreviousMatch?.[0] === match?.[0] &&\n\t\tpreviousMatch?.index === match?.index;\n\tif (isLooselyTrue) {\n\t\treturn (\n\t\t\tJSON.stringify({ ...previousMatch }) ===\n\t\t\tJSON.stringify({ ...match })\n\t\t);\n\t}\n\treturn false;\n};\n\nconst INFINITE_LOOP_ERROR = 'Infinite loop.';\n\n/**\n * @param {string|RegExp} matcher\n * @param {boolean}       skipCloning\n */\nfunction resolveMatcher(matcher, skipCloning = false) {\n\tif (!(matcher instanceof RegExp)) {\n\t\treturn new RegExp(matcher, 'g');\n\t}\n\tif (skipCloning) {\n\t\treturn matcher;\n\t}\n\treturn cloneRegexp(matcher);\n}\n\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\nfunction ponyfill(string, matcher) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst composedMatcher = resolveMatcher(matcher);\n\n\tconst { global: globalFlag } = composedMatcher;\n\tif (!globalFlag) {\n\t\tthrow new TypeError(\n\t\t\t'`String.prototype.matchAll` ponyfill called with a non-global RegExp argument'\n\t\t);\n\t}\n\n\t/** @type {RegExpMatchArray[]} */\n\tconst matches = [];\n\tlet match, previousMatch;\n\n\ttry {\n\t\tpreviousMatch = null;\n\t\twhile ((match = composedMatcher.exec(string)) !== null) {\n\t\t\tif (isInfiniteLoop(previousMatch, match)) {\n\t\t\t\tthrow new Error(INFINITE_LOOP_ERROR);\n\t\t\t}\n\t\t\tpreviousMatch = match;\n\t\t\tmatches.push(match);\n\t\t}\n\t} catch (error) {\n\t\t/* istanbul ignore if */\n\t\tif (\n\t\t\t!(error instanceof Error && error.message === INFINITE_LOOP_ERROR)\n\t\t) {\n\t\t\tthrow error;\n\t\t}\n\t\tmatches.pop();\n\t\tstring.replace(composedMatcher, (value, index, input, groups) => {\n\t\t\t/** @type {RegExpMatchArray} */\n\t\t\tconst match = [value];\n\t\t\tmatch.index = index;\n\t\t\tmatch.input = input;\n\t\t\tif (supportsGroups) {\n\t\t\t\tmatch.groups = groups;\n\t\t\t}\n\t\t\tmatches.push(match);\n\t\t\treturn value;\n\t\t});\n\t}\n\n\tif (typeof Symbol === 'undefined') {\n\t\t// @ts-ignore\n\t\treturn matches[iterator]();\n\t}\n\treturn matches[Symbol.iterator]();\n}\n\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups. Uses native implementation if available.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\nfunction preferNative(string, matcher) {\n\tif (typeof String.prototype.matchAll !== 'undefined') {\n\t\tconst composedMatcher = resolveMatcher(matcher, true);\n\t\treturn string.matchAll(composedMatcher);\n\t}\n\t/* istanbul ignore next */\n\treturn ponyfill(string, matcher);\n}\n\nexport default ponyfill;\n\nexport { preferNative };\n"],"names":["iterator","i","self","next","done","length","value","isRegexp","Object","prototype","toString","call","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","clonedRegexp","regexp","options","TypeError","flags","keys","map","flag","join","RegExp","source","lastIndex","supportsGroups","exec","isInfiniteLoop","previousMatch","match","isLooselyTrue","index","JSON","stringify","INFINITE_LOOP_ERROR","resolveMatcher","matcher","skipCloning","cloneRegexp","ponyfill","string","composedMatcher","globalFlag","matches","Error","push","error","message","pop","replace","input","groups","Symbol","preferNative","String","matchAll"],"mappings":"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"}